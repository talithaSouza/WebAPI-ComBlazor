@page  "/cadastro"
@inject IUsuarioService usuarioService
@inject NavigationManager navigation

<h3 style="text-align:center">Cadastro de Usuario</h3>

<div class="container" style="display: flex; flex-direction: row; justify-content: center; align-items: center; width: 75vw; height: 25vh; ">
    <div class="col-sm-8">
        <label form="nome">Email</label>
        <div class="">
            <input class="form-control" type="email" @bind-value="Usuario.Email" required />
        </div>

        <label form="senha">Senha</label>
        <div class="">
            <input class="form-control" type="password" @bind-value="Usuario.Senha" required />
        </div>

        <label form="senha">Confirme Sua Senha</label>
        <div class="">
            <input class="form-control" type="password" @bind-value="senhaConfirmar" required />
        </div>
    </div>
</div>
<br />
<div class="form-inline" style="justify-content: center">
    <button type="submit" class="btn btn-success" style="margin-right:4px" @onclick="() =>cadastrarUsuario(Usuario)">Cadastrar</button>

    <button type="submit" class="btn btn-danger"
            @onclick="@(() => navigation.NavigateTo("login"))">
        Cancelar
    </button>
</div>
<div style="padding-top:20px">
    @if (alerta)
    {
        <div class="@tipo" style="text-align:center" role="alert">
            @MensagemAlerta
            <button type="button" class="close" data-dismiss="alert" aria-label="Close" @onclick="() =>ocultarMensage()">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>

    }
</div>

@code {
    Usuario Usuario { get; set; } = new Usuario();
    private string senhaConfirmar;
    private bool alerta = false;
    private string MensagemAlerta;
    private string tipo;

    protected async override Task OnInitializedAsync()
    {
        ocultarMensage();
    }


    private bool validaSenha()
    {
        if (string.IsNullOrWhiteSpace(Usuario.Senha) || string.IsNullOrWhiteSpace(senhaConfirmar))
        {
            exibeMensagem("alert alert-danger", "Preencha o campo de senha!!");
            return false;
        }

        if (Usuario.Senha != senhaConfirmar)
        {
            exibeMensagem("alert alert-danger", "Campo de senhas não coincidem");
            return false;
        }

        ocultarMensage();
        return true;
    }

    private void ocultarMensage()
    {
        alerta = false;
    }
    private bool validaEmail(string email)
    {
        if (!email.Contains("@"))
            return false;

        return true;
    }
    private void exibeMensagem(string tipo, string mensagem)
    {
        alerta = true;
        this.tipo = tipo;
        MensagemAlerta = mensagem;
    }

    private async void cadastrarUsuario(Usuario usuario)
    {
        if (validaSenha())
        {
            if (!validaEmail(usuario.Email))
            {
                exibeMensagem("alert alert-danger", "Preencha o campo de email corretamente!!");
                return;
            }
            var usu = await usuarioService.CreateUsuario(usuario);
            if (usu != null)
            {
                exibeMensagem("alert alert-success", "Usuario Cadastrado com Sucesso");
                Usuario = null;
            }
        }
    }
}
