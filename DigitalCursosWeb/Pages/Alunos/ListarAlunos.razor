@page "/alunos"
@inject IAlunoService alunoService
<h3>Alunos</h3>
<a href="aluno/create" class="btn btn-outline-secondary">Criar Novo Aluno</a>

@if (Alunos == null)
{
    <img src="images/Carregando.gif" />
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Nome</th>
                <th>Email</th>
                <th>Idade</th>
                <th colspan="2" align="left">Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var aluno in Alunos)
            {
            <tr>
                <td>@aluno.AlunoId</td>
                <td>@aluno.Nome</td>
                <td>@aluno.Email</td>
                <td>@CalculaIdade(aluno.Nascimento)</td>
                <td><button><a href='/aluno/edit/@aluno.AlunoId'><i class="oi oi-pencil"></i></a></button></td>
                <td><button><a href='/aluno/delete/@aluno.AlunoId'><i class="oi oi-trash"></i></a></button></td>
                
            </tr>
            }
        </tbody>
    </table>
}

@code {
    public IEnumerable<Aluno> Alunos { get; set; }

    protected async override Task OnInitializedAsync()
    {
           await GetAlunos();
    }

    protected async Task GetAlunos()
    {
        //Alunos = await http.GetFromJsonAsync<IEnumerable<Aluno>>("api/alunos");
        Alunos = await alunoService.GetAlunos();
    }

    private string CalculaIdade(DateTime DataNascimento)
    {
        int anoNascimento = DataNascimento.Year;
        int anoAtual = DateTime.Now.Year;

        if (anoNascimento >= anoAtual)
            return "-";

        return (anoAtual - anoNascimento).ToString();
    }
}
