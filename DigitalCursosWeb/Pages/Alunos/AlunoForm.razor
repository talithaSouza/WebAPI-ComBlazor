<EditForm Model="@Aluno" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container">
        <div class="row">
            <label form="nome">Nome</label>
            <div class="col-sm-4">
                <InputText @bind-Value="Aluno.Nome" class="form-control" />
                <ValidationMessage For="@(()=> Aluno.Nome)" />
            </div>

            <label form="sobrenome">Sobrenome</label>
            <div class="col-sm-4">
                <InputText @bind-Value="Aluno.Sobrenome" class="form-control" />
                <ValidationMessage For="@(()=> Aluno.Sobrenome)" />
            </div>
        </div>
        <br />
        <div class="row">
            <label form="sexo">Sexo</label>
            <div class="col-sm-4">
                <InputSelect @bind-Value="Aluno.Genero" class="form-control">
                    @foreach (var genero in Enum.GetValues(typeof(Genero)))
                    {
                        <option value="@genero">@genero</option>
                    }
                </InputSelect>
            </div>

            <label form="email">Email</label>
            <div class="col-sm-4">
                <InputText @bind-Value="Aluno.Email" class="form-control" />
                <ValidationMessage For="@(()=> Aluno.Email)" />
            </div>
        </div>
        <br />

        <div class="row">
            <label form="nascimento">Nascimento</label>
            <div class="col-sm-4">
                <InputDate @bind-Value="Aluno.Nascimento" class="col" />
                <ValidationMessage For="@(()=> Aluno.Nascimento)" />
            </div>

            <!-- <div class="form-group row">-->
            <label form="curso">Curso:</label>
            <div class="col-sm-4">
                <select @onchange="CategoriaSelectionChanged" class="form-control">
                    @if (cursos != null)
                    {
                        @foreach (var curso in cursos)
                        {
                            <option value="@curso.CursoId"
                                    selected="@(curso.CursoId == Aluno.CursoId ? true : false)">
                                @curso.CursoNome

                            </option>
                        }
                    }
                </select>
                <!--</div>-->
            </div>
        </div>
    </div>



    <br />
    <button type="submit" class="btn btn-success">
        @ButtonTextSubmit
    </button>

    <button type="submit" class="btn btn-danger"
            @onclick="@(()=> navigation.NavigateTo("alunos"))">
        @ButtonTextCancelar
    </button>
</EditForm>

@code {
    IEnumerable<Curso> cursos = new List<Curso>();
    //Curso[] cursos;
    [Inject]
    private NavigationManager navigation { get; set; }
    [Inject]
    private ICursoService cursoService { get; set; }
    [Inject]
    private IAlunoService alunoService { get; set; }
    [Parameter]
    public Aluno Aluno { get; set; }
    [Parameter]
    public string ButtonTextSubmit { get; set; } = "Salvar";
    [Parameter]
    public string ButtonTextCancelar { get; set; } = "Cancelar";
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await CarregaCursos();
        if (Aluno.CursoId == 0)
            Aluno.CursoId = cursos.First().CursoId;
    }

    private async Task CarregaCursos()
    {
        cursos = await cursoService.GetCursos();
    }

    void CategoriaSelectionChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int id))
            Aluno.CursoId = id;
    }
}
