@page "/login"
@inject IUsuarioService usuarioService
@inject NavigationManager navigation

<div class="container" style="display: flex; flex-direction: row; justify-content: center; align-items: center; width: 75vw; height: 75vh;  ">
    <div class="box" style="width: 330px; height: 300px; background: #F0F8FF; ">
        <div style="justify-content: center; align-items: center; height: 25%;">
            <h3 style="text-align:center">Login</h3>
        </div>
        <input class="form-control" type="text" style="text-align:center; margin-bottom:10px" placeholder="Email" @bind-value="Usuario.Email"/>
        <input class="form-control" type="password" style="text-align: center; padding-bottom: 3%" placeholder="senha" @bind-value="Usuario.Senha"/>

        <button class="btn-primary" type="submit" style="margin-top:15px; width:99%" @onclick="()=> ValidaLogin(Usuario)">Entrar</button>

        <p style="text-align:center; padding:2%">Não é cadastrado? <a href='/cadastro'>Clique aqui</a></p>

        @if (@alerta)
        {
            <div class="alert alert-danger" style="text-align:center" role="alert">
                @mensagem
                <button type="button" class="close" data-dismiss="alert" aria-label="Close" @onclick="() =>ocultarMensage()">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

        }
    </div>
</div>

@code {
    public Usuario Usuario { get; set; } = new Usuario();
    private bool alerta = false;
    private string mensagem;


    private async void ValidaLogin(Usuario usuario)
    {
        try
        {
            var usu = await usuarioService.RetornarPorUsuarioESenha(usuario.Email, usuario.Senha);
            if (usu != null)
            {
                navigation.NavigateTo("alunos");
            }
        }
        catch (Exception ex)
        {
            alerta = true;
            mensagem = "Usuario não encontrado";
        }
    }

    private void ocultarMensage()
    {
        alerta = false;
    }
}
